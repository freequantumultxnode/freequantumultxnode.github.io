<!DOCTYPE html>
<html lang="zh-CN">

<head>
        <link rel="canonical" href="https://freequantumultxnode.github.io/news/article-22933.htm" />
    <meta charset="utf-8">
    <title>ZooKeeper之Java客户端API使用—读取数据。</title>
        <meta name="description" content="&nbsp; 读取数据，包括子节点列表的获取和节点数据的获取。ZooKeeper分别提供了不同的API来获取数据。  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp" />
        <link rel="icon" href="/assets/website/img/freequantumultxnode/favicon.ico" type="image/x-icon"/>
    <!-- Stylesheets -->
    <link href="/assets/website/css/freequantumultxnode/bootstrap.css" rel="stylesheet">
    <link href="/assets/website/css/freequantumultxnode/style.css" rel="stylesheet">
    <!-- Responsive File -->
    <link href="/assets/website/css/freequantumultxnode/responsive.css" rel="stylesheet">
    <!-- Color File -->
    <link href="/assets/website/css/freequantumultxnode/color.css" rel="stylesheet">
    <!-- Responsive -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <!--[if lt IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script><![endif]-->
    <!--[if lt IE 9]><script src="js/respond.js"></script><![endif]-->
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z4473RL96Y"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z4473RL96Y');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="page-wrapper">
                <!-- Preloader -->
        <div class="loader-wrap">
            <div class="preloader">
                <div class="preloader-close">Preloader Close</div>
            </div>
            <div class="layer layer-one"><span class="overlay"></span></div>
            <div class="layer layer-two"><span class="overlay"></span></div>
            <div class="layer layer-three"><span class="overlay"></span></div>
        </div>
        <!-- Main Header -->
        <header class="main-header header-style-two">
            <!-- Header Upper -->
            <div class="header-upper style-two">
                <div class="auto-container">
                    <div class="inner-container">
                        <!--Logo-->
                        <div class="logo-box">
                            <div class="logo">
                                                                <a href="/">
                                    <span>Free QuantumultX Node</span>
                                </a>
                                                            </div>
                        </div>
                        <div class="right-column">
                            <!--Nav Box-->
                            <div class="nav-outer">
                                <!--Mobile Navigation Toggler-->
                                <div class="mobile-nav-toggler"><img src="/assets/website/img/freequantumultxnode/icons/icon-bar.png" alt=""></div>
                                <!-- Main Menu -->
                                <nav class="main-menu navbar-expand-md navbar-light">
                                    <div class="collapse navbar-collapse show clearfix" id="navbarSupportedContent">
                                        <ul class="navigation">
                                                                                        <li><a href="/">首页</a></li>
                                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                                        <li><a href="#">关于</a></li>
                                            <li><a href="#">联系</a></li>
                                        </ul>
                                    </div>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--End Header Upper-->
            <!-- Sticky Header  -->
            <div class="sticky-header main-menu">
                <div class="auto-container">
                    <div class="inner-container">
                        <div class="nav-outer">
                            <!-- Main Menu -->
                            <nav class="main-menu">
                                <!--Keep This Empty / Menu will come through Javascript-->
                            </nav><!-- Main Menu End-->
                            <!-- Main Menu End-->
                        </div>
                    </div>
                </div>
            </div><!-- End Sticky Menu -->
            <!-- Mobile Menu  -->
            <div class="mobile-menu">
                <div class="menu-backdrop"></div>
                <div class="close-btn"><span class="icon flaticon-remove"></span></div>
                <nav class="menu-box">
                    <div class="nav-logo"><a href="/">Free QuantumultX Node</div>
                    <div class="menu-outer">
                        <!--Here Menu Will Come Automatically Via Javascript / Same Menu as in Header-->
                    </div>
                    <!--Social Links-->
                    <div class="social-links">
                        <ul class="clearfix">
                            <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                            <li><a href="#"><span class="fab fa-facebook-square"></span></a></li>
                            <li><a href="#"><span class="fab fa-pinterest-p"></span></a></li>
                            <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                            <li><a href="#"><span class="fab fa-youtube"></span></a></li>
                        </ul>
                    </div>
                </nav>
            </div><!-- End Mobile Menu -->
            <div class="nav-overlay">
                <div class="cursor"></div>
                <div class="cursor-follower"></div>
            </div>
        </header>
        <!-- End Main Header -->
        
        <!-- Page Title -->
        <section class="page-title" style="background-image: url(/assets/website/img/freequantumultxnode/background/bg-3.jpg);">
            <div class="auto-container">
                <div class="content-box">
                    <div class="content-wrapper">
                        <div class="title">
                            <h1>ZooKeeper之Java客户端API使用—读取数据。</h1>
                        </div>
                        <ul class="bread-crumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li>正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
        <!-- Page Title -->
        <!-- About Section -->
        <section class="about-section-two py-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="QuantumultX Node(圈X)官方节点站" data-url="https://quantumultxnode.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> <p><strong>&nbsp; 读取数据，包括子节点列表的获取和节点数据的获取。</strong>ZooKeeper分别提供了不同的API来获取数据。</p> </h1> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 客户端可以通过ZooKeeper的API来获取一个节点的所有子节点，有如下8个接口可供使用：</p> <ul> <li><strong>List&lt;String&gt; getChildren(final String path , Watcher watcher)</strong></li> <li><strong>List&lt;String&gt; getChildren(String path , boolean watch)</strong></li> <li><strong>void getChildren(final String path, Watcher watcher, ChildrenCallback cb, Object ctx)</strong></li> <li><strong>void getChildren(String path, boolean watch, ChildrenCallback cb, Object ctx)<br /></strong></li> <li><strong>List&lt;String&gt; getChildren(final String path , Watcher watcher, Stat stat)</strong></li> <li><strong>List&lt;String&gt; getChildren(String path , boolean watch, Stat stat)</strong></li> <li><strong>void getChildren(final String path, Watcher watcher, Children2Callback cb, Object ctx)</strong></li> <li><strong>void getChildren(String path, boolean watch, Children2Callback cb, Object ctx)</strong></li> </ul> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里列出的8个API包含了同步和异步的接口，API方法的参数说明如下表所示。</p> <blockquote> <table border="1" width="851" height="208" cellspacing="1" cellpadding="1"> <tbody> <tr> <th>参数名</th> <th>说明</th> </tr> </tbody> <tbody> <tr> <td>path</td> <td>指定数据节点的节点路径，即API调用的目的是获取该节点的子节点列表</td> </tr> <tr> <td>watcher</td> <td>注册的Watcher。一旦在本次子节点获取之后，子节点列表发生变更的话，那么就会向客户端发送通知。该参数允许传入null</td> </tr> <tr> <td>watch</td> <td>表明是否需要注册一个Watcher。这里就要使用默认Watcher了。如果这个参数是true，那么ZooKeeper客户端会自动使用上文中提到的那个默认Watcher；如果是false，表明不需要注册Watcher</td> </tr> <tr> <td>cb</td> <td>注册一个异步回调函数</td> </tr> <tr> <td>ctx</td> <td>用于传递上下文信息的对象</td> </tr> <tr> <td>stat</td> <td>指定数据节点的节点状态信息。用法是在接口中传入一个旧的stat变量，该stat变量会在方法执行执行过程中，被来自服务器响应的新stat对象替换</td> </tr> </tbody> </table> </blockquote> <h2>Watcher<br /></h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 注册Watcher，如果ZooKeeper客户端在获取到指定节点的子节点列表后，还需要订阅这个子节点列表的变化通知，那么就可以通过注册一个Watcher来实现。当有子节点被添加或是删除时，服务器就会向客户端发送一个NodeChildren Change(EventType.NodeChildrenChanged)类型的事件通知。需要注意的是，在服务端发送给客户端的事件通知中，是不包含最新的节点列表的，客户端必须主动重新进行获取。通常客户端在收到这个事件通知后，就可以再次获取最新的子节点列表了。</p> <h2>stat</h2> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 描述节点状态信息的对象：stat。stat对象中记录了一个节点的基本属性信息，例如列电创建时事务ID（cZxid）、最后一次修改的事务ID（mZxid）和节点数据内容的长度（dataLength）等。有时候，我们不仅需要获取节点最新的子节点列表，还要获取这个节点最新的节点状态信息。对于这种情况，我们可以将一个旧的stat变量传入API接口，该stat变量会在方法执行过程中，被来自服务端响应的新stat对象替换。</p> <h2>使用同步API获取子节点列表</h2> <p>// ZooKeeper API 获取子节点列表，使用同步（sync）接口</p> <p>public class ZooKeeper_GetChildren_API_Sync_Usage implements Watcher {<!-- --></p> <blockquote> <p>private static CountDownLatch connectedSemaphore = new CountDownLatch(1);</p> <p>pirvate static ZooKeeper zk = null;</p> <p>public static void main(String[] args) throws Exception {<!-- --></p> <blockquote> <p>String path = "/zk-book";</p> <p>zk = new ZooKeeper("domain1.book.zookeeper:2181", 5000, new ZooKeeper_GetChildren_API_Sync_Usage());</p> <p>connectedSemaphore.await();</p> <p>zk.create(path, "".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</p> <p>zk.create(path+"/c1", "".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</p> <p>List&lt;String&gt; childrenList = zk.getChildren(path , true);</p> <p>System.out.println(childrenList);</p> <p>zk.create(path+"/c2", "".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</p> <p>Thread.sleep(Integer.MAX_VALUE);</p> </blockquote> <p>}</p> <p>public void process(WatchedEvent event) {<!-- --></p> <blockquote> <p>if (KeeperState.SyncConnected == event.getState()) {<!-- --></p> <blockquote> <p>if (EventType.None == event.getType() &amp;&amp; null == event.getPath) {<!-- --></p> <blockquote> <p>connectedSemaphore.countDown();</p> </blockquote> <p>} else if (event.getType() == EventType.NodeChildrenChanged) {<!-- --></p> <blockquote> <p>try {<!-- --></p> <blockquote> <p>System.out.println("ReGet Child:" + zk.getChildren(event.getPath(), true));</p> </blockquote> <p>} catch (Exception e) {}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行程序，输出结果如下：</p> <blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/9b44669746ff34b2809bd31d8b7afa96.jpg" alt="ZooKeeper之Java客户端API使用—读取数据。"></p> </blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在上面这个程序中，我们首先创建了一个父节点/zk-book，以及一个子节点/zk-book/c1。然后调用getChildren的同步接口来获取/zk-book节点下的所有子节点，同时在接口调用的时候注册了一个Watcher。之后，我们继续向/zk-book节点创建子节点/zk-book/c2。由于之前我们对/zk-book节点注册了一个Watcher，因此，一旦此时有子节点被创建，ZooKeeper服务端就会客户端发出一个“子节点变更”的事件通知，于是，客户但在收到这个事件通知之后就可以再次调用getChildren方法来获取新的子节点列表。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外，从输出结果中我们还可以发现，调用getChildren获取到节点列表，都是数据节点的相对节点路径，例如上面输出结果中的c1和c2，事实上，完整的ZNode路径应该是/zk-book/c1和zk-book/c2。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 关于Watcher，这里简单提一点，ZooKeeper服务端在向客户端发送Watcher “NodeChildrenChanged”事件通知的时候，仅仅只会发出一个通知，而不会把节点的变化情况发送给客户端，需要客户端自己重新获取。另外，由于Watcher通知是一次性的，即一旦触发一次通知后，该Watcher就失效了，因此客户端需要反复注册Watcher。</p> <h2>使用异步API获取子节点列表</h2> <p>//&nbsp;ZooKeeper API 获取子节点列表，使用异步（async）接口</p> <p>public class ZooKeeper_GetChildren_API_ASync_Usage implements Watcher {<!-- --></p> <blockquote> <p>private static CountDownLatch connectedSemaphore = new CountDownLatch(1);</p> <p>private static ZooKeeper zk = null;</p> <p>public static void main(String[] args) throws Exception {<!-- --></p> <blockquote> <p>String path = "/zk-book";</p> <p>zk = new ZooKeeper("domain1.book.zookeeper:2181", 5000, new ZooKeeper_GetChildren_API_ASync_Usage());</p> <p>connectedSemaphore.await();</p> <p>zk.create(path , "".getBytes() , Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);</p> <p>zk.create(path+"/c1", "".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</p> <p>zk.getChildren(path, true, new IChildren2Callback(), null);</p> <p>zk.create(path + "/c2", "".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</p> <p>Thread.sleep(Integer.MAX_VALUE);</p> </blockquote> <p>}</p> <p>public void process(WatchedEvent event) {<!-- --></p> <blockquote> <p>if(KeeperState.SyncConnected == event.getState()) {<!-- --></p> <blockquote> <p>if(KeeperState.SyncConnected == event.getState()) {<!-- --></p> <blockquote> <p>if(EventType.None == event.getType() &amp;&amp; null == event.getPath()) {<!-- --></p> <blockquote> <p>connectedSemaphore.countDown();</p> </blockquote> <p>} else if (event.getType == EventType.NodeChildrenChanged) {<!-- --></p> <blockquote> <p>try {<!-- --></p> <blockquote> <p>System.out.println("ReGet Child:" + zk.getChildren(event.getPath(), true));</p> </blockquote> <p>} catch (Exception e) {}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> <p>class IChildren2Callback implements AsyncCallback.Children2Callback {<!-- --></p> <blockquote> <p>public void processResult(int rc, String path, Object ctx, List&lt;String&gt; children, Stat stat) {<!-- --></p> <blockquote> <p>System.out.println("Get Children znode result:[response code:" + rc + ", param path:" + path + ", ctx: " + ", children list: " + ", stat:" + stat);</p> </blockquote> <p>}</p> </blockquote> <p>}</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行程序，输出结果如下：</p> <blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/1a6274c493a72f679c6c532558ea802e.jpg" alt="ZooKeeper之Java客户端API使用—读取数据。"></p> </blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在上面这个程序中，我们将子节点列表的获取逻辑进行了异步化。异步接口通常会应用在这样的使用场景中：应用启动的时候，会获取一些配置信息，例如“机器列表”，这些配置通常比较大，并且不希望配置的获取影响应用的主流程。</p> </h1> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 客户端可以通过ZooKeeper的API来获取一个节点的数据内容，有如下4个接口：</p> <ul> <li><strong>byte[] getData(final String path, Watcher watcher, Stat stat)</strong></li> <li><strong>byte[] getData(String path, boolean watch, Stat stat)</strong></li> <li><strong>void getData(final String path, Watcher watcher, DataCallback cb, Object ctx)</strong></li> <li><strong>void getData(String path, boolean watch, DataCallback cb, Object ctx)</strong></li> </ul> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 这里列出的4个API包含了同步和异步的接口，API方法的参数说明如下表所示。</p> <blockquote> <table border="1" width="842" height="191" cellspacing="1" cellpadding="1"> <tbody> <tr> <th>参数名</th> <th>说明</th> </tr> </tbody> <tbody> <tr> <td>path</td> <td>指定数据节点的节点路径，即API调用的目的是获取该节点的数据内容</td> </tr> <tr> <td>watcher</td> <td>注册的Watcher。一旦之后节点内容有变更，就会向客户端发送通知。该参数允许传入null</td> </tr> <tr> <td>stat</td> <td>指定数据节点的节点状态信息。用法是在接口中传入一个旧的stat变量，该stat变量会在方法执行过程中，被来自服务端响应的新stat对象替换。</td> </tr> <tr> <td>watch</td> <td>表明是否需要注册一个Watcher。这里使用到默认Watcher。如果这个参数是true，那么ZooKeeper客户端会自动使用上文中提到的那个默认Watcher：如果是false，表明不需要注册Watcher</td> </tr> <tr> <td>cb</td> <td>注册一个异步回调函数</td> </tr> <tr> <td>ctx</td> <td>用于传递上下文信息的对象</td> </tr> </tbody> </table> </blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; getData接口和上文中的getChildren接口的用法基本相同，这里主要看一看注册的Watcher有什么不同之处。客户端在获取一个节点的数据内容的时候，是可以进行Watcher注册的，这样一来，一旦该节点的状态发生变更，那么ZooKeeper服务端就会向客户端发送一个NodeDataChanged(EventType.NodeDataChanged) 的事件通知。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外，API返回结果的类型是byte[]，目前ZooKeeper只支持这种类型的数据存储，所以在获取数据的时候也是返回此类型。</p> <h2>使用同步API获取节点数据内容</h2> <p>// ZooKeeper API 获取节点数据内容，使用同步（sync）接口</p> <p>public class ZooKeeper_GetData_API_Sync_Usage implements Watcher {<!-- --></p> <blockquote> <p>private static CountDownLatch connectedSemaphore = new CountDownLatch(1);</p> <p>pirvate static ZooKeeper zk = null;</p> <p>public static void main(String[] args) throws Exception {<!-- --></p> <blockquote> <p>String path = "/zk-book";</p> <p>zk = new ZooKeeper("domain1.book.zookeeper:2181", 5000, new ZooKeeper_GetData_API_Sync_Usage());</p> <p>connectedSemaphore.await();</p> <p>zk.create(path, "123".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);</p> <p> System.out.println(new String(zk.getData(path, true, stat)));<br /> System.out.println(stat.getCzxid() + "," + stat.getMzxid() + "," + stat.getVersion());<br /> zk.setData(path, "123".Bytes(), -1);</p> <p>Thread.sleep(Integer.MAX_VALUE);</p> </blockquote> <p>}</p> <p>public void process(WatchedEvent event) {<!-- --></p> <blockquote> <p>if (KeeperState.SyncConnected == event.getState()) {<!-- --></p> <blockquote> <p>if (EventType.None == event.getType() &amp;&amp; null == event.getPath) {<!-- --></p> <blockquote> <p>connectedSemaphore.countDown();</p> </blockquote> <p>} else if (event.getType() == EventType.NodeChildrenChanged) {<!-- --></p> <blockquote> <p>try {<!-- --></p> <blockquote> <p>System.out.println(new String(zk.getData(event.getPath(), true, stat)));</p> <blockquote> <p>System.out.println(stat.getCzxid() + "," + stat.getMzxid() + "," + stat.getVersion());</p> </blockquote> </blockquote> <p>} catch (Exception e) {}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> <p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行程序，输出结果如下：</p> <blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/ef83b2c1b25cece8f6ed14a992adf2b3.jpg" alt="ZooKeeper之Java客户端API使用—读取数据。"></p> </blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在上面这个程序中，我们首先创建了一个节点/zk-book，并初始化其数据内容为“123”.然后调用getData的同步接口来获取/zk-book节点的数据内容，调用的同时注册了一个Watcher。之后，我们同样以“123”去更新将该节点的数据内容，此时，由于我们之前在该节点上注册了一个Watcher，因此，一旦该节点的数据发生变化，ZooKeeper服务端就会向客户端发出一个“数据变更”的事件通知，于是，客户端可以收到这个事件通知后，再次调用getData接口来获取新的数据内容。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 另外，在调用getData接口的同时，我们传入了一个stat变量，在ZooKeeper客户端的内部实现中，会从服务端的响应中获取到数据节点的最新节点状态信息，来替换这个客户端的旧状态。</p> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 我们重点再来看下运行上面这个程序的输出结果中，前后两次调用getData接口的返回值。第一次的输出结果如下：</p> <blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/33c75a62fcd79dc3d64d91da2cc4c5a5.jpg" alt="ZooKeeper之Java客户端API使用—读取数据。"></p> </blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第二次的输出结果如下：</p> <blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/07969e87024083b8153a9807ccb63d19.jpg" alt="ZooKeeper之Java客户端API使用—读取数据。"></p> </blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一次是客户端主动调用getData接口来获取数据；第二次则是节点数据变更后，服务端发送Watcher事件通知给客户端后，客户端再次调用getData接口来获取数据。两次调用的输出结果中，节点数据内容的值并没有变化。既然节点的数据内容并没有变化，那么ZooKeeper服务端为什么会向客户端发送Watcher事件通知呢。这里，我们必须明确一个概念：节点的数据内容或是节点的数据版本变化，都被看作是ZooKeeper节点的变化。明白这个概念后，再回过头看上面的结果输出，可以看出，该节点在Zxid为“253404961568”时被创建，在Zxid为“253404961576”时被更新，于是节点的数据版本从“0”变化到“1”.所以，这里我们要明确的一点是，蜀军欸容或是数据版本变化，都会触发服务端的NodeDataChanged通知。</p> <h2>使用异步API获取节点数据内容</h2> <p>//&nbsp;ZooKeeper API 获取节点数据内容，使用异步（async）接口</p> <p>public class GetData_API_ASync_Usage implements Watcher {<!-- --></p> <blockquote> <p>private static CountDownLatch connectedSemaphore = new CountDownLatch(1);</p> <p>private static ZooKeeper zk = null;</p> <p>public static void main(String[] args) throws Exception {<!-- --></p> <blockquote> <p>String path = "/zk-book";</p> <p>zk = new ZooKeeper("domain1.book.zookeeper:2181", 5000, new GetData_API_ASync_Usage());</p> <p>connectedSemaphore.await();</p> <p> zk.create(path , "123".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode, EPHEMERAL);<br /> zk.getData(path, true, new IDataCallback(), null);<br /> zk.setData(path, "123".getBytes(), -1);</p> <p>Thread.sleep(Integer.MAX_VALUE);</p> </blockquote> <p>}</p> <p>public void process(WatchedEvent event) {<!-- --></p> <blockquote> <p>if(KeeperState.SyncConnected == event.getState()) {<!-- --></p> <blockquote> <p>if(KeeperState.SyncConnected == event.getState()) {<!-- --></p> <blockquote> <p>if(EventType.None == event.getType() &amp;&amp; null == event.getPath()) {<!-- --></p> <blockquote> <p>connectedSemaphore.countDown();</p> </blockquote> <p>} else if (event.getType == EventType.NodeChildrenChanged) {<!-- --></p> <blockquote> <p>try {<!-- --></p> <blockquote> <p>zk.getData(event.getPath(), true, new IDataCallback(), null);</p> </blockquote> <p>} catch (Exception e) {}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> </blockquote> <p>}</p> <p>class IChildren2Callback implements AsyncCallback.Children2Callback {<!-- --></p> <blockquote> <p>public void processResult(int rc, String path, Object ctx, List&lt;String&gt; children, Stat stat) {<!-- --></p> <blockquote> <p>System.out.println(rc +", " + path + ", " + new String(data));</p> <p>System.out.println(stat.getCzxid() + "," + stat.getVersion());</p> </blockquote> <p>}</p> </blockquote> <p>}</p> <p> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 运行程序，输出结果如下：</p> <blockquote> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220823/997175fb8b27d37cb1b132f128b751b6.jpg" alt="ZooKeeper之Java客户端API使用—读取数据。"></p> </blockquote> <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 上面就是使用getData的异步接口来获取节点数据内容的示例程序。</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-22476.htm">宠物粮食品牌名字4个字大全图片及名字怎么写（宠物粮食品牌名字4个字大全图片及名字怎么写的）</a></p>
                                        <p>下一个：<a href="/news/article-22934.htm">宠物零食货源（宠物零食货源一件代发）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-30871.htm" title="我所在的城市有一家宠物医院用英语怎么说 我所在的城市有一家宠物医院用英语怎么说">我所在的城市有一家宠物医院用英语怎么说 我所在的城市有一家宠物医院用英语怎么说</a></li>
                        <li class="py-2"><a href="/news/article-32286.htm" title="宠物粮店怎么开 宠物粮店怎么开店">宠物粮店怎么开 宠物粮店怎么开店</a></li>
                        <li class="py-2"><a href="/news/article-24311.htm" title="动物疫苗厂家排名榜单前十（动物疫苗厂家有哪些）">动物疫苗厂家排名榜单前十（动物疫苗厂家有哪些）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-13-quantumultx-github.htm" title="9月13日→18.9M/S|2024年最新免费节点Free QuantumultX Node订阅链接地址">9月13日→18.9M/S|2024年最新免费节点Free QuantumultX Node订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-17-quantumult-x-node-share.htm" title="11月17日→23M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">11月17日→23M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-10-14-quantumult-x-node-github.htm" title="10月14日→18.2M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">10月14日→18.2M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-24-free-subscribe-node.htm" title="11月24日→18.9M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">11月24日→18.9M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-20-free-subscribe-node.htm" title="9月20日→19.2M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">9月20日→19.2M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-9-23-quantumult-x-node-windows.htm" title="9月23日→21.9M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">9月23日→21.9M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-16-node-share-links.htm" title="11月16日→21.1M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">11月16日→21.1M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">3</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">34</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">31</span> <a href="/date/2024-10/" title="2024-10 归档">2024-10</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2024-09/" title="2024-09 归档">2024-09</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
        <!-- Main Footer -->
                <!-- Main Footer -->
        <footer class="main-footer">
            <div class="footer-bottom">
                <div class="auto-container">
                    <div class="copyright">
                        <div class="text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <a href="/">Free QuantumultX Node(圈X)免费机场节点订阅官网</a> 版权所有
                            <br />
                            Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!--Scroll to top-->
        <div class="scroll-to-top scroll-to-target" data-target="html"><span class="flaticon-right-arrow"></span></div>
        <script src="/assets/website/js/frontend/freequantumultxnode/jquery.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/popper.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/bootstrap-select.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/jquery.fancybox.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/isotope.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/owl.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/appear.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/wow.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/lazyload.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/scrollbar.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/TweenMax.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/swiper.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/script.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </div>
    <!--End pagewrapper-->
    
</body>

</html>