<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freequantumultxnode.github.io/news/article-36221.htm" />
    <meta charset="utf-8">
    <title>利用Redis实现防止接口重复提交功能</title>
        <meta name="description" content="在划水摸鱼之际，突然听到有的用户反映增加了多条一样的数据，这用户立马就不干了，让我们要马上修复，不然就要投诉我们。  这下鱼也摸不了了，只能去看看发生了什么事情。据用户反映，当时网络有点卡，所以多点了" />
        <link rel="icon" href="/assets/website/img/freequantumultxnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free QuantumultX Node(圈X)免费机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freequantumultxnode.github.io/news/article-36221.htm" />
    <meta property="og:site_name" content="Free QuantumultX Node(圈X)免费机场节点订阅官网" />
    <meta property="og:title" content="利用Redis实现防止接口重复提交功能" />
    <meta property="og:image" content="https://freequantumultxnode.github.io/uploads/20240913-1/aa2f2149a2c32e3cd751330876133947.webp" />
        <meta property="og:release_date" content="2025-01-05T09:46:36" />
    <meta property="og:updated_time" content="2025-01-05T09:46:36" />
        <meta property="og:description" content="在划水摸鱼之际，突然听到有的用户反映增加了多条一样的数据，这用户立马就不干了，让我们要马上修复，不然就要投诉我们。  这下鱼也摸不了了，只能去看看发生了什么事情。据用户反映，当时网络有点卡，所以多点了" />
        
    <!-- Stylesheets -->
    <link href="/assets/website/css/freequantumultxnode/bootstrap.css" rel="stylesheet">
    <link href="/assets/website/css/freequantumultxnode/style.css" rel="stylesheet">
    <!-- Responsive File -->
    <link href="/assets/website/css/freequantumultxnode/responsive.css" rel="stylesheet">
    <!-- Color File -->
    <link href="/assets/website/css/freequantumultxnode/color.css" rel="stylesheet">
    <!-- Responsive -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <!--[if lt IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script><![endif]-->
    <!--[if lt IE 9]><script src="js/respond.js"></script><![endif]-->

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="利用Redis实现防止接口重复提交功能">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z4473RL96Y"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z4473RL96Y');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="page-wrapper">
                <!-- Preloader -->
        <div class="loader-wrap">
            <div class="preloader">
                <div class="preloader-close">Preloader Close</div>
            </div>
            <div class="layer layer-one"><span class="overlay"></span></div>
            <div class="layer layer-two"><span class="overlay"></span></div>
            <div class="layer layer-three"><span class="overlay"></span></div>
        </div>
        <!-- Main Header -->
        <header class="main-header header-style-two">
            <!-- Header Upper -->
            <div class="header-upper style-two">
                <div class="auto-container">
                    <div class="inner-container">
                        <!--Logo-->
                        <div class="logo-box">
                            <div class="logo">
                                                                <a href="/">
                                    <span>Free QuantumultX Node</span>
                                </a>
                                                            </div>
                        </div>
                        <div class="right-column">
                            <!--Nav Box-->
                            <div class="nav-outer">
                                <!--Mobile Navigation Toggler-->
                                <div class="mobile-nav-toggler"><img src="/assets/website/img/freequantumultxnode/icons/icon-bar.png" alt=""></div>
                                <!-- Main Menu -->
                                <nav class="main-menu navbar-expand-md navbar-light">
                                    <div class="collapse navbar-collapse show clearfix" id="navbarSupportedContent">
                                        <ul class="navigation">
                                                                                        <li><a href="/">首页</a></li>
                                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                                        <li><a href="#">关于</a></li>
                                            <li><a href="#">联系</a></li>
                                        </ul>
                                    </div>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--End Header Upper-->
            <!-- Sticky Header  -->
            <div class="sticky-header main-menu">
                <div class="auto-container">
                    <div class="inner-container">
                        <div class="nav-outer">
                            <!-- Main Menu -->
                            <nav class="main-menu">
                                <!--Keep This Empty / Menu will come through Javascript-->
                            </nav><!-- Main Menu End-->
                            <!-- Main Menu End-->
                        </div>
                    </div>
                </div>
            </div><!-- End Sticky Menu -->
            <!-- Mobile Menu  -->
            <div class="mobile-menu">
                <div class="menu-backdrop"></div>
                <div class="close-btn"><span class="icon flaticon-remove"></span></div>
                <nav class="menu-box">
                    <div class="nav-logo"><a href="/">Free QuantumultX Node</div>
                    <div class="menu-outer">
                        <!--Here Menu Will Come Automatically Via Javascript / Same Menu as in Header-->
                    </div>
                    <!--Social Links-->
                    <div class="social-links">
                        <ul class="clearfix">
                            <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                            <li><a href="#"><span class="fab fa-facebook-square"></span></a></li>
                            <li><a href="#"><span class="fab fa-pinterest-p"></span></a></li>
                            <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                            <li><a href="#"><span class="fab fa-youtube"></span></a></li>
                        </ul>
                    </div>
                </nav>
            </div><!-- End Mobile Menu -->
            <div class="nav-overlay">
                <div class="cursor"></div>
                <div class="cursor-follower"></div>
            </div>
        </header>
        <!-- End Main Header -->
        
        <!-- Page Title -->
        <section class="page-title" style="background-image: url(/assets/website/img/freequantumultxnode/background/bg-3.jpg);">
            <div class="auto-container">
                <div class="content-box">
                    <div class="content-wrapper">
                        <div class="title">
                            <h1>利用Redis实现防止接口重复提交功能</h1>
                        </div>
                        <ul class="bread-crumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li>正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
        <!-- Page Title -->
        <!-- About Section -->
        <section class="about-section-two py-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="QuantumultX Node(圈X)官方节点站" data-url="https://quantumultxnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>在划水摸鱼之际，突然听到有的用户反映增加了多条一样的数据，这用户立马就不干了，让我们要马上修复，不然就要投诉我们。</p> <p> 这下鱼也摸不了了，只能去看看发生了什么事情。据用户反映，当时网络有点卡，所以多点了几次提交，最后发现出现了十几条一样的数据。</p> <p>只能说现在的人都太心急了，连这几秒的时间都等不了，惯的。心里吐槽归吐槽，这问题还是要解决的，不然老板可不惯我。</p> <p> 其实想想就知道为啥会这样，在网络延迟的时候，用户多次点击，最后这几次请求都发送到了服务器访问相关的接口，最后执行插入。</p> <p>既然知道了原因，该如何解决。当时我的第一想法就是用<strong>注解 + AOP</strong>。通过在自定义注解里定义一些相关的字段，比如过期时间即该时间内同一用户不能重复提交请求。然后把注解按需加在接口上，最后在拦截器里判断接口上是否有该接口，如果存在则拦截。</p> <p>解决了这个问题那还需要解决另一个问题，就是怎么判断当前用户限定时间内访问了当前接口。其实这个也简单，可以使用Redis来做，用户名 + 接口 + 参数啥的作为唯一键，然后这个键的过期时间设置为注解里过期字段的值。设置一个过期时间可以让键过期自动释放，不然如果线程突然歇逼，该接口就一直不能访问。</p> <p> 这样还需要注意的一个问题是，如果你先去Redis获取这个键，然后判断这个键不存在则设置键；存在则说明还没到访问时间，返回提示。这个思路是没错的，但这样如果获取和设置分成两个操作，就不满足原子性了，那么在多线程下是会出错的。所以这样需要把俩操作变成一个原子操作。</p> <p>分析好了，就开干。</p> <h4><a id="1_18" rel="nofollow"></a>1、自定义注解</h4> <pre><code class="prism language-java"><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ElementType</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">;</span><span class="token keyword">import</span><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Target</span><span class="token punctuation">;</span><span class="token comment">/**  * 防止同时提交注解  */</span><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>PARAMETER<span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span>METHOD<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token keyword">public</span><span class="token annotation punctuation">@interface</span><span class="token class-name">NoRepeatCommit</span><span class="token punctuation">{<!-- --></span><span class="token comment">// key的过期时间3s</span><span class="token keyword">int</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">default</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>这里为了简单一点，只定义了一个字段<code>expire</code>，默认值为3，即3s内同一用户不允许重复访问同一接口。使用的时候也可以传入自定义的值。</p> <p>我们只需要在对应的接口上添加该注解即可</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@NoRepeatCommit</span> 或者<span class="token annotation punctuation">@NoRepeatCommit</span><span class="token punctuation">(</span>expire<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre> <h4><a id="2_43" rel="nofollow"></a>2、自定义拦截器</h4> <p>自定义好了注解，那就该写拦截器了。</p> <pre><code class="prism language-java"><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">NoRepeatSubmitAspect</span><span class="token punctuation">{<!-- --></span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token class-name">Logger</span> _log<span class="token operator">=</span><span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token class-name">NoRepeatSubmitAspect</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">RedisLock</span> redisLock<span class="token operator">=</span><span class="token keyword">new</span><span class="token class-name">RedisLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.zheng.common.annotation.NoRepeatCommit)"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token keyword">void</span><span class="token function">point</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span><span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"point()"</span><span class="token punctuation">)</span><span class="token keyword">public</span><span class="token class-name">Object</span><span class="token function">doAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> pjp<span class="token punctuation">)</span><span class="token keyword">throws</span><span class="token class-name">Throwable</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 获取request</span><span class="token class-name">RequestAttributes</span> requestAttributes<span class="token operator">=</span><span class="token class-name">RequestContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ServletRequestAttributes</span> servletRequestAttributes<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestAttributes</span><span class="token punctuation">)</span> requestAttributes<span class="token punctuation">;</span><span class="token class-name">HttpServletRequest</span> request<span class="token operator">=</span> servletRequestAttributes<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HttpServletResponse</span> responese<span class="token operator">=</span> servletRequestAttributes<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> result<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span><span class="token class-name">String</span> account<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">UpmsConstant</span><span class="token punctuation">.</span>ACCOUNT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">UpmsConstant</span><span class="token punctuation">.</span>USER<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">MethodSignature</span> signature<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> pjp<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Method</span> method<span class="token operator">=</span> signature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">NoRepeatCommit</span> form<span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">NoRepeatCommit</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> sessionId<span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"|"</span><span class="token operator">+</span> user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> url<span class="token operator">=</span><span class="token class-name">ObjectUtils</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> pg<span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> key<span class="token operator">=</span> account<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span> sessionId<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span> url<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span> pg<span class="token punctuation">;</span><span class="token keyword">int</span> expire<span class="token operator">=</span> form<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>expire<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             expire<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 获取锁</span><span class="token keyword">boolean</span> isSuccess<span class="token operator">=</span> redisLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> key<span class="token operator">+</span> sessionId<span class="token punctuation">,</span> expire<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取成功</span><span class="token keyword">if</span><span class="token punctuation">(</span>isSuccess<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 执行请求</span>             result<span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> status<span class="token operator">=</span> responese<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             _log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"status = {}"</span><span class="token operator">+</span> status<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放锁，3s后让锁自动释放，也可以手动释放</span><span class="token comment">// redisLock.releaseLock(key, key + sessionId);</span><span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{<!-- --></span><span class="token comment">// 失败，认为是重复提交的请求</span><span class="token keyword">return</span><span class="token keyword">new</span><span class="token class-name">UpmsResult</span><span class="token punctuation">(</span><span class="token class-name">UpmsResultConstant</span><span class="token punctuation">.</span>REPEAT_COMMIT<span class="token punctuation">,</span><span class="token class-name">ValidationError</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">UpmsResultConstant</span><span class="token punctuation">.</span>REPEAT_COMMIT<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>拦截器定义的切点是<code>NoRepeatCommit</code>注解，所以被<code>NoRepeatCommit</code>注解标注的接口就会进入该拦截器。这里我使用了<code>account + "_" + sessionId + "_" + url + "_" + pg</code>作为唯一键，表示某个用户访问某个接口。</p> <p>这样比较关键的一行是<code>boolean isSuccess = redisLock.tryLock(key, key + sessionId, expire);</code>。可以看看<code>RedisLock</code>这个类。</p> <h4><a id="3Redis_104" rel="nofollow"></a>3、Redis工具类</h4> <p>上面讨论过了，获取锁和设置锁需要做成原子操作，不然并发环境下会出问题。这里可以使用Redis的<code>SETNX</code>命令。</p> <pre><code class="prism language-java"><span class="token comment">/**  * redis分布式锁实现  * Lua表达式为了保持数据的原子性  */</span><span class="token keyword">public</span><span class="token keyword">class</span><span class="token class-name">RedisLock</span><span class="token punctuation">{<!-- --></span><span class="token comment">/**      * redis 锁成功标识常量      */</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">Long</span> RELEASE_SUCCESS<span class="token operator">=</span><span class="token number">1L</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> SET_IF_NOT_EXIST<span class="token operator">=</span><span class="token string">"NX"</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> SET_WITH_EXPIRE_TIME<span class="token operator">=</span><span class="token string">"EX"</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> LOCK_SUCCESS<span class="token operator">=</span><span class="token string">"OK"</span><span class="token punctuation">;</span><span class="token comment">/**      * 加锁 Lua 表达式。      */</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> RELEASE_TRY_LOCK_LUA<span class="token operator">=</span><span class="token string">"if redis.call('setNx',KEYS[1],ARGV[1]) == 1 then return redis.call('expire',KEYS[1],ARGV[2]) else return 0 end"</span><span class="token punctuation">;</span><span class="token comment">/**      * 解锁 Lua 表达式.      */</span><span class="token keyword">private</span><span class="token keyword">static</span><span class="token keyword">final</span><span class="token class-name">String</span> RELEASE_RELEASE_LOCK_LUA<span class="token operator">=</span><span class="token string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span><span class="token punctuation">;</span><span class="token comment">/**      * 加锁      * 支持重复，线程安全      * 既然持有锁的线程崩溃，也不会发生死锁，因为锁到期会自动释放      * @param lockKey    加锁键      * @param userId     加锁客户端唯一标识（采用用户id, 需要把用户 id 转换为 String 类型）      * @param expireTime 锁过期时间      * @return OK 如果key被设置了      */</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span><span class="token keyword">long</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Jedis</span> jedis<span class="token operator">=</span><span class="token class-name">JedisUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">JedisUtils</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> result<span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> SET_IF_NOT_EXIST<span class="token punctuation">,</span> SET_WITH_EXPIRE_TIME<span class="token punctuation">,</span> expireTime<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>LOCK_SUCCESS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>                 jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/**      * 解锁      * 与 tryLock 相对应，用作释放锁      * 解锁必须与加锁是同一人，其他人拿到锁也不可以解锁      *      * @param lockKey 加锁键      * @param userId  解锁客户端唯一标识（采用用户id, 需要把用户 id 转换为 String 类型）      * @return      */</span><span class="token keyword">public</span><span class="token keyword">boolean</span><span class="token function">releaseLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> lockKey<span class="token punctuation">,</span><span class="token class-name">String</span> userId<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token class-name">Jedis</span> jedis<span class="token operator">=</span><span class="token class-name">JedisUtils</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{<!-- --></span>             jedis<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">JedisUtils</span><span class="token punctuation">.</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> result<span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">eval</span><span class="token punctuation">(</span>RELEASE_RELEASE_LOCK_LUA<span class="token punctuation">,</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>RELEASE_SUCCESS<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{<!-- --></span><span class="token keyword">if</span><span class="token punctuation">(</span>jedis<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>                 jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span><span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>在加锁的时候，我使用了<code>String result = jedis.set(lockKey, userId, SET_IF_NOT_EXIST, SET_WITH_EXPIRE_TIME, expireTime);</code>。set方法如下</p> <pre><code class="prism language-java"><span class="token comment">/* Set the string value as value of the key. The string can't be longer than 1073741824 bytes (1 GB). Params: 		key – 		value – 		nxxx – NX|XX, NX -- Only set the key if it does not already exist. XX -- Only set the 		key if it already exist. 		expx – EX|PX, expire time units: EX = seconds; PX = milliseconds 		time – expire time in the units of expx Returns: Status code reply */</span><span class="token keyword">public</span><span class="token class-name">String</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">final</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token keyword">final</span><span class="token class-name">String</span> value<span class="token punctuation">,</span><span class="token keyword">final</span><span class="token class-name">String</span> nxxx<span class="token punctuation">,</span><span class="token keyword">final</span><span class="token class-name">String</span> expx<span class="token punctuation">,</span><span class="token keyword">final</span><span class="token keyword">long</span> time<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token function">checkIsInMultiOrPipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     client<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> nxxx<span class="token punctuation">,</span> expx<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> client<span class="token punctuation">.</span><span class="token function">getStatusCodeReply</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre> <p>在key不存在的情况下，才会设置key，设置成功则返回OK。这样就做到了查询和设置原子性。</p> <p>需要注意这里在使用完jedis，需要进行close，不然耗尽连接数就完蛋了，我不会告诉你我把服务器搞挂了。</p> <h4><a id="4_208" rel="nofollow"></a>4、其他想说的</h4> <p>其实做完这三步差不多了，基本够用。再考虑一些其他情况的话，比如在expire设置的时间内，我这个接口还没执行完逻辑咋办呢？</p> <p>其实我们不用自己在这整破轮子，直接用健壮的轮子不好吗？比如<code>Redisson</code>，来实现分布式锁，那么上面的问题就不用考虑了。有看门狗来帮你做，在键过期的时候，如果检查到键还被线程持有，那么就会重新设置键的过期时间。</p> <p><strong>觉得好的可以帮忙点个赞啊，也可以关注我的公众号【秃头哥编程】</strong></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-35824.htm">动物疫苗证是什么样的图片啊（动物疫苗证书）</a></p>
                                        <p>下一个：<a href="/news/article-36222.htm">扬州宠物店在什么地方（扬州宠物店在什么地方开）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-25710.htm" title="动物疫苗是什么单位负责的（动物疫苗是什么单位负责的呢）">动物疫苗是什么单位负责的（动物疫苗是什么单位负责的呢）</a></li>
                        <li class="py-2"><a href="/news/article-35174.htm" title="长沙免费领养宠物的平台有哪些（长沙哪里可以免费领养宠物）">长沙免费领养宠物的平台有哪些（长沙哪里可以免费领养宠物）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-24-quantumult-x-node-share.htm" title="1月24日→19.6M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">1月24日→19.6M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-22-node-share.htm" title="11月22日→19M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">11月22日→19M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-30385.htm" title="离我最近的24小时的宠物医院（附近24小时宠物门诊）">离我最近的24小时的宠物医院（附近24小时宠物门诊）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-13-quantumult-x-node-share.htm" title="11月13日→22.6M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">11月13日→22.6M/S|2024年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-22934.htm" title="宠物零食货源（宠物零食货源一件代发）">宠物零食货源（宠物零食货源一件代发）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-1-2-quantumult-x-node.htm" title="1月2日→20.5M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">1月2日→20.5M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-22476.htm" title="宠物粮食品牌名字4个字大全图片及名字怎么写（宠物粮食品牌名字4个字大全图片及名字怎么写的）">宠物粮食品牌名字4个字大全图片及名字怎么写（宠物粮食品牌名字4个字大全图片及名字怎么写的）</a></li>
                        <li class="py-2"><a href="/news/article-44502.htm" title="领养宠物有权要回吗（领养宠物原主人有权要回吗没有什么手续的情况下）">领养宠物有权要回吗（领养宠物原主人有权要回吗没有什么手续的情况下）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">6</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
        <!-- Main Footer -->
                <!-- Main Footer -->
        <footer class="main-footer">
            <div class="footer-bottom">
                <div class="auto-container">
                    <div class="copyright">
                        <div class="text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                            <a href="/">Free QuantumultX Node(圈X)免费机场节点订阅官网</a> 版权所有
                            <br />
                            Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!--Scroll to top-->
        <div class="scroll-to-top scroll-to-target" data-target="html"><span class="flaticon-right-arrow"></span></div>
        <script src="/assets/website/js/frontend/freequantumultxnode/jquery.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/popper.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/bootstrap-select.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/jquery.fancybox.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/isotope.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/owl.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/appear.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/wow.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/lazyload.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/scrollbar.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/TweenMax.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/swiper.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/script.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </div>
    <!--End pagewrapper-->
    
</body>

</html>