<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://freequantumultxnode.github.io/news/article-95713.htm" />
    <meta charset="utf-8">
    <title>Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</title>
        <meta name="description" content="学完了 Kotlin 的基础知识而已，今天我们来学习 Kotlin 的标准函数和静态方法。  标准函数 with、run 和 apply Kotlin 的标准函数指的是 Standard.kt 文件中" />
        <link rel="icon" href="/assets/website/img/freequantumultxnode/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Free QuantumultX Node(圈X)免费机场节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://freequantumultxnode.github.io/news/article-95713.htm" />
    <meta property="og:site_name" content="Free QuantumultX Node(圈X)免费机场节点订阅官网" />
    <meta property="og:title" content="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]" />
    <meta property="og:image" content="https://freequantumultxnode.github.io/uploads/20240913-1/a50ddf6b321fb62487737347f05a756a.webp" />
        <meta property="og:release_date" content="2025-04-14T08:03:14" />
    <meta property="og:updated_time" content="2025-04-14T08:03:14" />
        <meta property="og:description" content="学完了 Kotlin 的基础知识而已，今天我们来学习 Kotlin 的标准函数和静态方法。  标准函数 with、run 和 apply Kotlin 的标准函数指的是 Standard.kt 文件中" />
        
    <!-- Stylesheets -->
    <link href="/assets/website/css/freequantumultxnode/bootstrap.css" rel="stylesheet">
    <link href="/assets/website/css/freequantumultxnode/style.css" rel="stylesheet">
    <!-- Responsive File -->
    <link href="/assets/website/css/freequantumultxnode/responsive.css" rel="stylesheet">
    <!-- Color File -->
    <link href="/assets/website/css/freequantumultxnode/color.css" rel="stylesheet">
    <!-- Responsive -->
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
    <!--[if lt IE 9]><script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.js"></script><![endif]-->
    <!--[if lt IE 9]><script src="js/respond.js"></script><![endif]-->

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z4473RL96Y"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z4473RL96Y');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <div class="page-wrapper">
                <!-- Preloader -->
        <div class="loader-wrap">
            <div class="preloader">
                <div class="preloader-close">Preloader Close</div>
            </div>
            <div class="layer layer-one"><span class="overlay"></span></div>
            <div class="layer layer-two"><span class="overlay"></span></div>
            <div class="layer layer-three"><span class="overlay"></span></div>
        </div>
        <!-- Main Header -->
        <header class="main-header header-style-two">
            <!-- Header Upper -->
            <div class="header-upper style-two">
                <div class="auto-container">
                    <div class="inner-container">
                        <!--Logo-->
                        <div class="logo-box">
                            <div class="logo">
                                <a href="/">
                                                                <span>Free QuantumultX Node</span>
                                                                </a>
                            </div>
                        </div>
                        <div class="right-column">
                            <!--Nav Box-->
                            <div class="nav-outer">
                                <!--Mobile Navigation Toggler-->
                                <div class="mobile-nav-toggler"><img src="/assets/website/img/freequantumultxnode/icons/icon-bar.png" alt=""></div>
                                <!-- Main Menu -->
                                <nav class="main-menu navbar-expand-md navbar-light">
                                    <div class="collapse navbar-collapse show clearfix" id="navbarSupportedContent">
                                        <ul class="navigation">
                                                                                        <li><a href="/">首页</a></li>
                                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                                    </ul>
                                    </div>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!--End Header Upper-->
            <!-- Sticky Header  -->
            <div class="sticky-header main-menu">
                <div class="auto-container">
                    <div class="inner-container">
                        <div class="nav-outer">
                            <!-- Main Menu -->
                            <nav class="main-menu">
                                <!--Keep This Empty / Menu will come through Javascript-->
                            </nav><!-- Main Menu End-->
                            <!-- Main Menu End-->
                        </div>
                    </div>
                </div>
            </div><!-- End Sticky Menu -->
            <!-- Mobile Menu  -->
            <div class="mobile-menu">
                <div class="menu-backdrop"></div>
                <div class="close-btn"><span class="icon flaticon-remove"></span></div>
                <nav class="menu-box">
                    <div class="nav-logo"><a href="/">Free QuantumultX Node</div>
                    <div class="menu-outer">
                        <!--Here Menu Will Come Automatically Via Javascript / Same Menu as in Header-->
                    </div>
                    <!--Social Links-->
                    <div class="social-links">
                        <ul class="clearfix">
                            <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                            <li><a href="#"><span class="fab fa-facebook-square"></span></a></li>
                            <li><a href="#"><span class="fab fa-pinterest-p"></span></a></li>
                            <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                            <li><a href="#"><span class="fab fa-youtube"></span></a></li>
                        </ul>
                    </div>
                </nav>
            </div><!-- End Mobile Menu -->
            <div class="nav-overlay">
                <div class="cursor"></div>
                <div class="cursor-follower"></div>
            </div>
        </header>
        <!-- End Main Header -->
        
        <!-- Page Title -->
        <section class="page-title" style="background-image: url(/assets/website/img/freequantumultxnode/background/bg-3.jpg);">
            <div class="auto-container">
                <div class="content-box">
                    <div class="content-wrapper">
                        <div class="title">
                            <h1>Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]</h1>
                        </div>
                        <ul class="bread-crumb">
                            <li><a href="/">首页</a></li>
                            <li><a href="/news/">新闻资讯</a></li>
                            <li>正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </section>
        <!-- Page Title -->
        <!-- About Section -->
        <section class="about-section-two py-5">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="QuantumultX Node(圈X)官方节点站" data-url="https://quantumultxnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-dracula"> </h1> <p>学完了 Kotlin 的基础知识而已，今天我们来学习 Kotlin 的标准函数和静态方法。</p> <h2> <a id="_withrun__apply_3" rel="nofollow"></a>标准函数 with、run 和 apply</h2> <p>Kotlin 的标准函数指的是 Standard.kt 文件中定义的函数，任何 Kotlin 代码都可以自由地调用所有的标准函数。</p> <p>在 <a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://juejin.cn/post/6987580277996388366"  rel="nofollow">快速入门 kotlin 编程</a> 中，我们已经学习了 let 这个标准函数，它的主要作用就是配合 ?. 操作符来进行辅助判空处理，这里就不再赘述了。</p> <h3> <a id="with__8" rel="nofollow"></a>with 标准函数</h3> <p><strong>with 函数接收两个参数：第一个参数可以是一个任意类型的对象，第二个参数是一个 Lambda 表达式。with 函数会在 Lambda 表达式中提供第一个参数对象的上下文，并使用 Lambda 表达式中的最后一行代码作为返回值返回</strong>。示例代码如下：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 这里是 obj 的上下文</span>     <span class="token string">"value"</span> <span class="token comment">// with 函数的返回值</span> <span class="token punctuation">}</span> </code></pre> <p>那么这个函数有什么作用呢？它可以在连续调用同一个对象的多个方法时让代码变得更加精简，下面我们来看一个具体的例子。</p> <p>比如有一个水果列表，现在我们想吃完所有水果，并将结果打印出来，就可以这样写：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Pear"</span><span class="token punctuation">,</span> <span class="token string">"Grape"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> builder <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Start eating fruits.\n"</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Ate all fruits."</span><span class="token punctuation">)</span> <span class="token keyword">val</span> result <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> </code></pre> <p>仔细观察上述代码，你会发现我们连续调用了很多次 builder 对象的方法。其实这个时候就可以考虑使用 with 函数来让代码变得更加精简，如下所示：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Pear"</span><span class="token punctuation">,</span> <span class="token string">"Grape"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Start eating fruits.\n"</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Ate all fruits."</span><span class="token punctuation">)</span>     <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> </code></pre> <p>这段代码乍一看可能有点迷惑性，其实很好理解。首先我们给 with 函数的第一个参数传入了一个 StringBuilder 对象，那么接下来整个 Lambda 表达式的上下文就会是这个 StringBuilder 对象。于是我们在 Lambda 表达式中就不用再像刚才那样调用 builder.append() 和 builder.toString() 方法了，而是可以直接调用 append() 和 toString() 方法。Lambda 表达式的最后一行代码会作为 with 函数的返回值返回，最终我们将结果打印出来。</p> <h3> <a id="run__47" rel="nofollow"></a>run 标准函数</h3> <p><strong>run 函数的用法和使用场景其实和 with 函数是非常类似的，只是稍微做了一些语法改动而已。首先 run 函数通常不会直接调用，而是要在某个对象的基础上调用；其次 run 函数只接收一个 Lambda 参数，并且会在 Lambda 表达式中提供调用对象的上下文。其他方面和 with 函数是一样的，包括也会使用 Lambda 表达式中的最后一行代码作为返回值返回</strong>。示例代码如下：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 这里是 obj 的上下文</span>     <span class="token string">"value"</span> <span class="token comment">// run 函数的返回值</span> <span class="token punctuation">}</span> </code></pre> <p>那么现在我们就可以使用 run 函数来修改一下吃水果的这段代码，如下所示：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Pear"</span><span class="token punctuation">,</span> <span class="token string">"Grape"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Start eating fruits.\n"</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Ate all fruits."</span><span class="token punctuation">)</span>     <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> </code></pre> <p>总体来说变化非常小，只是将调用 with 函数并传入 StringBuilder 对象改成了调用 StringBuilder 对象的 run 方法，其他都没有任何区别，这两段代码最终的执行结果是完全相同的。</p> <h3> <a id="apply__71" rel="nofollow"></a>apply 标准函数</h3> <p><strong>apply 函数和 run 函数也是极其类似的，都要在某个对象上调用，并且只接收一个 Lambda 参数，也会在 Lambda 表达式中提供调用对象的上下文，但是 apply 函数无法指定返回值，而是会自动返回调用对象本身</strong>。示例代码如下：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> result <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{<!-- --></span>     <span class="token comment">// 这里是 obj 的上下文</span> <span class="token punctuation">}</span> <span class="token comment">// result == obj</span> </code></pre> <p>那么现在我们再使用 apply 函数来修改一下吃水果的这段代码，如下所示：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string">"Apple"</span><span class="token punctuation">,</span> <span class="token string">"Banana"</span><span class="token punctuation">,</span> <span class="token string">"Orange"</span><span class="token punctuation">,</span> <span class="token string">"Pear"</span><span class="token punctuation">,</span> <span class="token string">"Grape"</span><span class="token punctuation">)</span> <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Start eating fruits.\n"</span><span class="token punctuation">)</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span>fruit <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">append</span><span class="token punctuation">(</span>fruit<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>     <span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Ate all fruits."</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> </code></pre> <p>注意这里的代码变化，由于 apply 函数无法指定返回值，只能返回调用对象本身，因此这里的 result 实际上是一个 StringBuilder 对象，所以我们在最后打印的时候还要再调用它的 toString() 方法才行。这段代码的执行结果和前面两段仍然是完全相同的，我就不再重复演示了。</p> <p>这样我们就将 Kotlin 中最常用的几个标准函数学完了，你会发现其实 with、run 和 apply 这几个函数的用法和使用场景是非常类似的。在大多数情况下，它们可以相互转换，但你最好还是要掌握它们之间的区别，以便在编程时能够作出最佳的选择。</p> <p>回想一下刚刚在最佳实践环节编写的启动 Activity 的代码：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> SecondActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span> intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> <span class="token string">"data1"</span><span class="token punctuation">)</span> intent<span class="token punctuation">.</span><span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> <span class="token string">"data2"</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span> </code></pre> <p>这里每传递一个参数就要调用一次 intent.putExtra() 方法，如果要传递 10 个参数，那就得调用 10 次。对于这种情况，我们就可以使用标准函数来对代码进行精简，如下所示：</p> <pre><code class="prism language-kotlin"><span class="token keyword">val</span> intent <span class="token operator">=</span> <span class="token function">Intent</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> SecondActivity<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param1"</span><span class="token punctuation">,</span> <span class="token string">"data1"</span><span class="token punctuation">)</span>     <span class="token function">putExtra</span><span class="token punctuation">(</span><span class="token string">"param2"</span><span class="token punctuation">,</span> <span class="token string">"data2"</span><span class="token punctuation">)</span>	 <span class="token punctuation">}</span> context<span class="token punctuation">.</span><span class="token function">startActivity</span><span class="token punctuation">(</span>intent<span class="token punctuation">)</span> </code></pre> <p>可以看到，由于 Lambda 表达式中的上下文就是 Intent 对象，所以我们不再需要调用 intent.putExtra() 方法，而是直接调用 putExtra() 方法就可以了。传递的参数越多，这种写法的优势也就越明显。</p> <h2> <a id="_113" rel="nofollow"></a>定义静态方法</h2> <p>静态方法在某些编程语言里面又叫作类方法，指的就是那种不需要创建实例就能调用的方法，所有主流的编程语言都会支持静态方法这个特性。</p> <p>在 Java中 定义一个静态方法非常简单，只需要在方法上声明一个static关键字就可以了，如下所示：</p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Util</span> <span class="token punctuation">{<!-- --></span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do action"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>这是一个非常简单的工具类，上述代码中的 doAction() 方法就是一个静态方法。调用静态方法并不需要创建类的实例，而是可以直接以 Util.doAction() 这种写法来调用。因而静态方法非常适合用于编写一些工具类的功能，因为工具类通常没有创建实例的必要，基本是全局通用的。</p> <p>但是和绝大多数主流编程语言不同的是，Kotlin 却极度弱化了静态方法这个概念，想要在 Kotlin 中定义一个静态方法反倒不是一件容易的事。</p> <p>那么 Kotlin 为什么要这样设计呢？因为 Kotlin 提供了比静态方法更好用的语法特性，并且我们在上一节中已经学习过了，那就是单例类。</p> <h3> <a id="_130" rel="nofollow"></a>单例类</h3> <p>像工具类这种功能，在 Kotlin 中就非常推荐使用单例类的方式来实现，比如上述的 Util 工具类，如果使用 Kotlin 来实现的话就可以这样写：</p> <pre><code class="prism language-kotlin"><span class="token keyword">object</span> Util <span class="token punctuation">{<!-- --></span>     <span class="token keyword">fun</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do action"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>虽然这里的 doAction() 方法并不是静态方法，但是我们仍然可以使用 Util.doAction() 的方式来调用，这就是单例类所带来的便利性。</p> <h3> <a id="companion_object_142" rel="nofollow"></a>companion object</h3> <p>不过，使用单例类的写法会将整个类中的所有方法全部变成类似于静态方法的调用方式，而如果我们只是希望让类中的某一个方法变成静态方法的调用方式该怎么办呢？这个时候就可以使用刚刚在最佳实践环节用到的 companion object 了，示例如下：</p> <pre><code class="prism language-kotlin"><span class="token keyword">class</span> Util <span class="token punctuation">{<!-- --></span>     <span class="token keyword">fun</span> <span class="token function">doAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do action"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>      <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">fun</span> <span class="token function">doAction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do action2"</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>这里首先我们将 Util 从单例类改成了一个普通类，然后在类中直接定义了一个 doAction1() 方法，又在 companion object 中定义了一个 doAction2() 方法。现在这两个方法就有了本质的区别，因为 doAction1() 方法是一定要先创建 Util 类的实例才能调用的，而 doAction2() 方法可以直接使用 Util.doAction2() 的方式调用。</p> <p>不过，doAction2() 方法其实也并不是静态方法，companion object 这个关键字实际上会在 Util 类的内部创建一个伴生类，而 doAction2() 方法就是定义在这个伴生类里面的实例方法。只是 Kotlin 会保证 Util 类始终只会存在一个伴生类对象，因此调用 Util.doAction2() 方法实际上就是调用了 Util 类中伴生对象的 doAction2() 方法。</p> <p>由此可以看出，Kotlin 确实没有直接定义静态方法的关键字，但是提供了一些语法特性来支持类似于静态方法调用的写法，这些语法特性基本可以满足我们平时的开发需求了。</p> <p>然而如果你确确实实需要定义真正的静态方法，Kotlin 仍然提供了两种实现方式：注解和顶层方法。下面我们来逐个学习一下。</p> <h3> <a id="_165" rel="nofollow"></a>注解</h3> <p>先来看注解，前面使用的单例类和 companion object 都只是在语法的形式上模仿了静态方法的调用方式，实际上它们都不是真正的静态方法。因此如果你在 Java 代码中以静态方法的形式去调用的话，你会发现这些方法并不存在。而如果我们给单例类或 companion object 中的方法加上 @JvmStatic 注解，那么 Kotlin 编译器就会将这些方法编译成真正的静态方法，如下所示：</p> <pre><code class="prism language-kotlin"><span class="token keyword">class</span> Util <span class="token punctuation">{<!-- --></span>     <span class="token keyword">fun</span> <span class="token function">doAction1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do action1"</span><span class="token punctuation">)</span>     <span class="token punctuation">}</span>      <span class="token keyword">companion</span> <span class="token keyword">object</span> <span class="token punctuation">{<!-- --></span>         <span class="token annotation builtin">@JvmStatic</span>         <span class="token keyword">fun</span> <span class="token function">doAction2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>             <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do action2"</span><span class="token punctuation">)</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p>注意，@JvmStatic 注解只能加在单例类或 companion object 中的方法上，如果你尝试加在一个普通方法上，会直接提示语法错误。</p> <p>由于 doAction2() 方法已经成为了真正的静态方法，那么现在不管是在 Kotlin 中还是在 Java 中，都可以使用 Util.doAction2() 的写法来调用了。</p> <h3> <a id="_185" rel="nofollow"></a>顶层方法</h3> <p>再来看顶层方法，顶层方法指的是那些没有定义在任何类中的方法，比如我们在上一节中编写的 main() 方法。Kotlin 编译器会将所有的顶层方法全部编译成静态方法，因此只要你定义了一个顶层方法，那么它就一定是静态方法。</p> <p>想要定义一个顶层方法，首先需要创建一个 Kotlin 文件。对着任意包名右击 → New → KotlinFile/Class，在弹出的对话框中输入文件名即可。注意创建类型要选择 File。</p> <p>点击 “OK” 完成创建，这样刚刚的包名路径下就会出现一个 Helper.kt 文件。现在我们在这个文件中定义的任何方法都会是顶层方法，比如这里我就定义一个 doSomething() 方法吧，如下所示：</p> <pre><code class="prism language-kotlin"><span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>     <span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"do something"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span> </code></pre> <p>刚才已经讲过了，Kotlin 编译器会将所有的顶层方法全部编译成静态方法，那么我们要怎么调用这个 doSomething() 方法呢？</p> <p>如果是在 Kotlin 代码中调用的话，那就很简单了，所有的顶层方法都可以在任何位置被直接调用，不用管包名路径，也不用创建实例，直接键入 doSomething() 即可，如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221229/0d91523f214937d55bcd8c657b8d4b5a.jpg" alt="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]"></p> <p>但如果是在 Java 代码中调用，你会发现是找不到 doSomething() 这个方法的，因为 Java 中没有顶层方法这个概念，所有的方法必须定义在类中。那么这个 doSomething() 方法被藏在了哪里呢？我们刚才创建的 Kotlin 文件名叫作 Helper.kt，于是 Kotlin 编译器会自动创建一个叫作 HelperKt 的 Java 类，doSomething() 方法就是以静态方法的形式定义在 HelperKt 类里面的，因此在 Java 中使用 HelperKt.doSomething() 的写法来调用就可以了，如下图所示：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads/20221229/ed8935b1ae406fffde373232ac20b7b7.jpg" alt="Kotlin 标准函数和静态方法[第一行代码 Kotlin 学习笔记]"></p> <p>好了，关于静态方法的相关内容就学到这里。本小节中所学的知识，除了 @JvmStatic 注解不太常用之外，其他像单例类、companion object、顶层方法都是 Kotlin 中十分常用的技巧，希望你能将它们牢牢掌握。</p> </p></div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-94960.htm">宠物粮食品牌前十名有哪些呢图片大全集（宠物粮食排行榜）</a></p>
                                        <p>下一个：<a href="/news/article-95717.htm">动物防疫计划名词解释（制定动物防疫计划的意义是什么）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-70965.htm" title="kubectl的安装和设置命令补全（linux和win10）">kubectl的安装和设置命令补全（linux和win10）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-6-quantumult-x-github.htm" title="3月6日→20.3M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">3月6日→20.3M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-22-free-high-speed-nodes.htm" title="3月22日→21.5M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">3月22日→21.5M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-90438.htm" title="详解Python的pyyaml模块">详解Python的pyyaml模块</a></li>
                        <li class="py-2"><a href="/news/article-96443.htm" title="vue+element-ui+axios多文件上传的实现并显示整体进度_vue.js">vue+element-ui+axios多文件上传的实现并显示整体进度_vue.js</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-4-quantumult-x-node-share.htm" title="3月4日→18.5M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">3月4日→18.5M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-69015.htm" title="开宠物用品店的优势和劣势怎么写（宠物用品店的开店详情）">开宠物用品店的优势和劣势怎么写（宠物用品店的开店详情）</a></li>
                        <li class="py-2"><a href="/news/article-89680.htm" title="1970年农历5月27日阴历是多少号（1970年农历五月二十阳历是几号）">1970年农历5月27日阴历是多少号（1970年农历五月二十阳历是几号）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-12-quantumult-x-node-share.htm" title="4月12日→22.4M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址">4月12日→22.4M/S|2025年最新免费节点Free QuantumultX Node(圈X)订阅链接地址</a></li>
                        <li class="py-2"><a href="/news/article-74957.htm" title="长沙宠物领养中心电话多少（长沙宠物论坛0731领养）">长沙宠物领养中心电话多少（长沙宠物论坛0731领养）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">45</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">90</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </section>
        <!-- Main Footer -->
                <!-- Main Footer -->
        <footer class="main-footer">
            <div class="footer-bottom">
                <div class="auto-container">
                    <div class="copyright">
                        <div class="text">
                                                <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <a href="/">Free QuantumultX Node(圈X)免费机场节点订阅官网</a> 版权所有
                            <br />
                            Powered by WordPress
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!--Scroll to top-->
        <div class="scroll-to-top scroll-to-target" data-target="html"><span class="flaticon-right-arrow"></span></div>
        <script src="/assets/website/js/frontend/freequantumultxnode/jquery.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/popper.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/bootstrap-select.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/jquery.fancybox.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/isotope.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/owl.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/appear.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/wow.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/lazyload.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/scrollbar.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/TweenMax.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/swiper.min.js"></script>
        <script src="/assets/website/js/frontend/freequantumultxnode/script.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
    </div>
    <!--End pagewrapper-->
    
</body>

</html>